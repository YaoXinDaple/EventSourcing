# 事件溯源 (Event Sourcing) 示例项目

这是一个基于 .NET 和 Entity Framework Core 的事件溯源示例项目，展示了如何在银行账户系统中实现事件溯源模式。

## 目录

- [项目概述](#项目概述)
- [事件溯源简介](#事件溯源简介)
- [项目结构](#项目结构)
- [技术栈](#技术栈)
- [快速开始](#快速开始)
- [AI 提示词参考](#ai-提示词参考)

## 项目概述

本项目实现了一个完整的事件溯源系统，包含：

- **银行账户聚合根**：支持创建账户、存款、取款等操作
- **事件存储**：持久化所有领域事件
- **快照功能**：优化聚合重建性能
- **时间穿越**：可回溯到任意时间点的账户状态
- **CQRS 模式**：命令查询职责分离
- **RESTful API**：提供完整的 Web API 接口

## 事件溯源简介

### 优势

1. **回溯能力**：可回溯任意时间点的实体状态
2. **高性能写入**：持久化都是追加操作，不修改已有数据
3. **伸缩性**：聚合读写容易伸缩，进而整个业务系统都容易伸缩
4. **细粒度排障**：观察领域模型状态的变化过程来排障
5. **建模自由**：不需要考虑聚合持久化，模型设计不需要考虑存储实现

### 限制

1. **模型复杂性**：必须设计可回溯的模型，保证可以重建聚合
2. **强制 CQRS**：必须实现命令查询职责分离
3. **重建实现**：重建能力需要编码实现

### 适用场景

事件溯源在以下场景下特别有用：

1. **高性能写入需求**
2. **严格审计要求**（需要回溯任意时间点的实体状态）
3. **时间穿越功能**
4. **复杂排障需求**
5. **灵活建模需求**

## 项目结构

```
EventSourcingBankAccount/
├── EventSourcingBankAccount.Api/          # Web API 层
├── EventSourcingBankAccount.Domain/       # 领域层
└── EventSourcingBankAccount.Infrastructure/ # 基础设施层
```

### 核心实现

#### 事件存储实现
- 持久化领域事件
- 仓储的保存功能基于事件流
- 查询方法：按 ID 查询，或者提前构建索引

#### 快照机制
- **用途**：当聚合事件较多时，优化重建性能
- **策略**：每发生一定数量事件后，保存聚合完整状态
- **查询优化**：先查询最近快照，再根据后续事件重建聚合

#### 快照策略
支持多种快照创建策略：

1. **基于事件数量**：快照后领域事件数量达到某个阈值
2. **基于时间间隔**：距离上次快照时间间隔达到阈值
3. **基于事件类型**：特定事件发生后创建快照
4. **基于重建时间**：最近 N 次重建时间超过阈值

#### 快照创建时机
- 定时任务
- 保存领域事件时
- 读取聚合时

## 技术栈

- **.NET 8.0**：主要开发框架
- **C# 最新版本**：编程语言
- **Entity Framework Core**：ORM 框架
- **SQLite**：默认数据库（支持配置其他数据库）
- **ASP.NET Core Web API**：API 框架










## 事件溯源的示例代码 (AI提示词)

你是一个领域驱动设计（DDD）和事件溯源（Event Sourcing）的专家。请根据以下要求编写一个简单的示例代码，展示如何使用事件溯源来管理一个银行账户的状态。

要求：
1. 定义一个 `BankAccount` 聚合根，包含账户ID和余额。
2. 定义一个 `DepositMoney` 命令，用于存款操作。
3. 定义一个 `MoneyDeposited` 事件，表示存款已完成。
4. 定义一个 `WithDrawMoney` 命令，用于取款操作。
5. 定义一个 `MoneyWithdrawn` 事件，表示取款已完成。
4. 实现一个事件存储，用于保存和加载事件，使用EFCore。
5. 实现一个命令处理器，用于处理 `DepositMoney` 命令并生成相应的事件。
6. 实现一个事件处理器，用于应用 `MoneyDeposited` 事件并更新账户余额。
7. 定义一个 `GetAccountBalance` 查询，用于获取当前账户余额。
8. 定义领域命令和领域事件的基类。让命令和事件继承这些基类。
9. `BankAccount`聚合根需要支持从事件流中重建其状态。
10. `BankAccount` 聚合根需要定义一个接口用于判断是否需要创建新的快照。这个接口可以根据事件数量或时间间隔来决定是否创建快照。分别实现基于事件数量和时间间隔的快照策略。
11. 实现一个快照存储，用于保存和加载快照，使用EFCore。
12. 基于快照和事件可以指定任意时间点回溯账户状态。
13. 创建WebApi接口，支持存款、取款和查询余额、回溯状态操作。






### 技术栈 使用 Net10 以及C#语言最新版本编写代码。使用 Entity Framework Core 作为 ORM 框架。
